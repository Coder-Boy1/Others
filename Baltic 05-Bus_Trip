
#include <bits/stdc++.h>

using namespace std;

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 
  
#define ordered_set tree< pair < int , int > , null_type,less< pair < int , int > > , rb_tree_tag,tree_order_statistics_node_update> 
  
#define N 100005
//#define int long long
int s[N],e[N];
vector < pair < pair < pair < int , int > , pair < int , int > > , int > > a;
ordered_set dp[N];

int32_t main()
{
        ifstream mycin;
        mycin.open ("TRIP.IN");
        
        int ans=1000000000;

 
      //  freopen("TRIP.IN","r",stdin);
      //  freopen("TRIP.OUT","w",stdout);
        int n, m, p, t;
        mycin>>n>>m>>p>>t;

        for(int i=0;i<m;i++)
        {
                int s1, e1, a1, a2, b1, b2;
                mycin>>s1>>e1>>a1>>a2>>b1>>b2;
                int cost = a2-a1 + b2-b1;
                if(b2>t)       
                        continue;
                a.push_back({{{b2, s1},{a1, e1}}, cost});
                
        }       
        
        
       
        dp[1].insert({0,0});
        sort(a.begin(), a.end());

        set < pair < int , int > >::iterator it; 
        int x = a.size();

        for(int i=0;i<x;i++)
        {
                int endt = a[i].first.first.first;
                int scity = a[i].first.first.second; 
                int ecity = a[i].first.second.second;
                int startt = a[i].first.second.first;
                int cost = a[i].second;
        // cout<<startt<<" "<<scity<<" "<<ecity<<" "<<endt<<" "<<cost<<endl;
                if(dp[scity].size()==0)
                {
                        continue;
                }
                else 
                {
                        int x = dp[scity].order_of_key({startt, 1000000000});
                        if(x==0)
                                continue;
                        
                        pair < int , int > tt = *(dp[scity].find_by_order(x-1));
                        
                        int prevdp = tt.second;
                        int prevt = tt.first;
                        int curdp = prevdp + cost + startt-prevt;
                        // cout<<"HI"<<endl;
                        // for(auto it=dp[scity].begin();it!=dp[scity].end();it++)
                        // {
                        //         cout<<it->first<<" "<<it->second<<endl;
                        // }
                        // cout<<"BYE"<<endl;
                        // cout<<x<<" "<<prevdp<<" "<<prevt<<" "<<curdp<<endl;

                        x = dp[ecity].order_of_key({endt, 1000000000});
                        if(x==0)
                        {
                                if(ecity == p)
                                {
                                        ans = min(ans , curdp + (t-endt));
                                }
                                dp[ecity].insert({endt,curdp});
                                continue;
                        }
                        
                        tt = *(dp[ecity].find_by_order(x-1));
                 
                        int temp = tt.second;
                        int ti = tt.first;
                        temp+= endt - ti;
                        if(temp > curdp)
                        {
                                if(ecity == p)
                                {
                                        ans = min(ans , curdp + (t-endt));
                                } 
                                       dp[ecity].insert({endt,curdp});
                                // cout<<"endt "<<ecity<<" "<<endt<<" "<<curdp<<endl;
                        }
                        
                        
                }
        }
        if(ans == 10000000000000)
                ans = -1;
        ofstream myfile;
        myfile.open ("TRIP.OUT");
        myfile << "ans" <<endl;
        myfile.close();
        mycin.close();
        return 0;
}

