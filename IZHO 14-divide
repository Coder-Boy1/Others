// For each index from 0 to n-1 try to find the best possible answer which starts from this index.
// The final answer would be best answer among all those n index.
// Firstly create prefix array for energy. Then substract x[i] ( distance ) from that. lets call pref[i] - x[i] = P[i]
// Now for index 0 the maximum possible answer would be the right most index j where P[j] >= 0
// Now for index 1 we have to update out  "P" array for which we have to do two things.
// 1. substract the energy of 0th day from all elements of P array and
// 2. add distance between first and second index from all elements of P array . 
// Now again we have to find largest non negetive integer in P array. ( Which can be done by query of lazy propogation in segment tree )
// The range update step 1 and 2 can be done lazy update in segment tree.
// Continue this procedure till last element.

#include <bits/stdc++.h>

using namespace std;

#define int long long 
#define ll long long
#define N 1000000
#define M 3000000

ll a[M],b[M];
ll tree[4*N],arr[N],lazy[4*N];
int xx[N], g[N], d[N], gg[N], dd[N];

void build(int node,int start,int end)
{
        if(start==end){
                tree[node]=arr[start];
                return ;
        }
        int mid=(start+end)/2;
        build(2*node+1,start,mid);
        build(2*node+2,1+mid,end);
        tree[node]=max(tree[2*node+1],tree[2*node+2]);
}
void update(int node,int start,int end,int l,int r,ll val)
{
        if(lazy[node]!=0){
                ll foo=lazy[node];
                lazy[node]=0;
                tree[node]+=foo;
                if(start!=end){
                        
                        lazy[2*node+1]+=foo;
                        lazy[2*node+2]+=foo;
                }
        }
        if(end<l || start>r) return ;
        if(start>=l && end<=r){
                tree[node]+=val;
                if(start!=end){
                        
                        lazy[2*node+1]+=val;
                        lazy[2*node+2]+=val;
                }
                return ;
        }
        int mid=(start+end)/2;
        update(2*node+1,start,mid,l,r,val);
        update(2*node+2,1+mid,end,l,r,val);
        tree[node]=max(tree[2*node+1],tree[2*node+2]);
}

ll quer2(int node, int start, int end)
{
        if(lazy[node]!=0){
                ll foo=lazy[node];
                lazy[node]=0;
                tree[node]+=foo;
                if(start!=end){
                        
                        lazy[2*node+1]+=foo;
                        lazy[2*node+2]+=foo;
                }
        }
        if(start==end){
                if(tree[node]>=0)
                        return start;
                else
                        return -1;
        }
        int mid = (start+end)/2;
        ll foo = tree[2*node+1]+lazy[2*node+1];
        ll bar = tree[2*node+2]+lazy[2*node+2];
        if(bar>=0){
                return quer2(2*node+2,mid+1,end);
        }
        else{
                return quer2(2*node+1,start,mid);
        }

}

int32_t main()
{
        ios_base::sync_with_stdio(false);
        int i;
        for(i=0;i<N;i++){
                lazy[i]=0;
                arr[i]=0;
        }
        int n,m;
        cin>>n;
        int ans=0;
        for(int i=0;i<n;i++)
        {
                cin>>xx[i]>>g[i]>>d[i];
                gg[i]=g[i]; dd[i] = d[i];
                ans = max( ans, g[i]);
                if(i)
                {
                        g[i]+=g[i-1];
                        d[i]+=d[i-1];
                }
                xx[i]-=xx[0];
        }

        for(i=0;i<n;i++){
                arr[i]=d[i]-xx[i];
        }
    
        build(0,0,n-1);
        for(int i=0;i<n;i++)
        {
                int x= quer2(0,0,n-1);
                if(x<0)
                        continue;
                int temp= g[x];
                if(i)
                        temp-=g[i-1];
                ans = max(ans, temp);
                if(i!=n-1)
                {
                        int nextd = xx[i+1]- xx[i];
                        int temp = nextd - dd[i];
                        update(0,0,n-1,i+1,n-1,temp);
                }
                update(0,0,n-1,i,i,-1e17);
        }
    
        cout<<ans<<endl;

    return 0;
}
