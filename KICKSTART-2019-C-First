#include <bits/stdc++.h>

using namespace std;


#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;

#define ordered_set                                                            \
  tree<int, null_type, less<int>, rb_tree_tag,                                 \
       tree_order_statistics_node_update>

ordered_set row[50005];
ordered_set column[50005];

void foo()
{
        for(int i=0;i<=50000;i++)
        {
                row[i].clear();
                column[i].clear();
        }
}
int32_t main()
{
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);

        int t;
        cin>>t;

        for(int tt=1;tt<=t;tt++)
        {
                foo();
                int n, rows, c, x1, x2;
                cin>>n>>rows>>c>>x1>>x2;

                string s;
                cin>>s;
                row[x1].insert(x2);
                column[x2].insert(x1);

                int curx=x1;
                int cury=x2;

                for(int i=0;i<s.length();i++)
                {
                        if(s[i]=='E')
                        {
                                int l=cury,r=c;
                                int ans=cury;
                                while(l<=r)
                                {
                                        int mid=(l+r)/2;

                                        int p=row[curx].order_of_key(mid+1);
                                        int q=row[curx].order_of_key(cury);
                                        p-=q;
                                        
                                        int req=mid-cury+1;

                                        if(p==req)
                                        {
                                                l=mid+1;
                                                ans=mid;
                                        }
                                        else 
                                        {
                                                r=mid-1;
                                        }
                                }
                                cury=ans+1;
                                row[curx].insert(cury);
                                column[cury].insert(curx);
                              //  cout<<curx<<" "<<cury<<endl;
                                continue;
                        }

                        if(s[i]=='W')
                        {
                                int l=0, r=cury;
                                int ans=cury;
                                while(l<=r)
                                {
                                        int mid=(l+r)/2;
                                        int p=row[curx].order_of_key(cury+1);
                                        int q=row[curx].order_of_key(mid);
                                        p-=q;
                                        int req=cury-mid+1;
                                        if(req==p)
                                        {
                                                r=mid-1;
                                                ans=mid;
                                        }
                                        else
                                        {
                                                l=mid+1;
                                        }
                                }
                                cury=ans-1;
                                row[curx].insert(cury);
                                column[cury].insert(curx);
                             //   cout << curx << " " << cury << endl;
                                continue;
                        }

                        if(s[i]=='N')
                        {
                                int l=0, r=curx;
                                int ans=curx;

                                while(l<=r)
                                {
                                        int mid=(l+r)/2;
                                        int p=column[cury].order_of_key(curx+1);
                                        int q=column[cury].order_of_key(mid);
                                        p-=q;
                                        int req=curx-mid+1;

                                        if(req==p)
                                        {
                                                r=mid-1;
                                                ans=mid;
                                        }
                                        else 
                                        {
                                                l=mid+1;
                                        }
                                }
                                curx=ans-1;
                                row[curx].insert(cury);
                                column[cury].insert(curx);
                             //   cout << curx << " " << cury << endl;
                                continue;
                        }

                        if(s[i]=='S')
                        {
                                int l=curx,r=rows;
                                int ans=curx;
                                while(l<=r)
                                {
                                        int mid=(l+r)/2;
                                        
                                        int p=column[cury].order_of_key(mid+1);
                                        int q=column[cury].order_of_key(curx);
                                        p-=q;
                                        int req=mid-curx+1;

                                        if(p==req)
                                        {
                                                l=mid+1;
                                                ans=mid;
                                        }
                                        else
                                        {
                                                r=mid-1;
                                        }
                                }
                                curx=ans+1;
                                row[curx].insert(cury);
                                column[cury].insert(curx);
                            //    cout << curx << " " << cury << endl;
                                continue;

                        }
                }
                cout<<"Case #"<<tt<<":"<<" ";
                cout<<curx<<" "<<cury<<endl;

        }

        return 0;
}
